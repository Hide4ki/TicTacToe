#include <iostream>
#include <utility>
#include <string>
#include <algorithm>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <SFML/Graphics.hpp>

using namespace std;

int flag = 0;

class Server
{
  int sock, listener;
  struct sockaddr_in addr;
  char buf[1024];
  int bytes_read;
  bool state = false;
public:
  Server()
  {
    listener = socket(AF_INET, SOCK_STREAM, 0);
    if(listener < 0)
    {
        perror("socket");
        exit(1);
    }
    
    addr.sin_family = AF_INET;
    addr.sin_port = htons(3445);
    addr.sin_addr.s_addr = htonl(INADDR_ANY);
    if(bind(listener, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        perror("bind");
        exit(2);
    }

    listen(listener, 1);
  }
  void Stop(){state = false;}
  void Start()
  {
    state = true;
    sock = accept(listener, 0, 0);
    if(sock < 0)
    {
      perror("accept");
      exit(3);
    }
  }
  void work()
  {
    bytes_read = recv(sock, buf, 1024, 0);
    if(bytes_read <= 0)
      state = false;
    cout << buf << endl;
    buf[0]++;
    if(buf[0] == '5')
      flag = 1;
    send(sock, buf, bytes_read, 0);
    buf[0] = 0;
  }
  bool was_stooped()
  {
    return !state;
  }
  void Close()
  {
    close(sock);
  }
};

int main()
{
  Server myServer;
  while(1)
  {
    myServer.Start();
    while(1)
    {
      if(myServer.was_stooped())
        break;
      myServer.work();
    }
    myServer.Stop();
    if (flag==1)
      break;
  }
  return 0;
}